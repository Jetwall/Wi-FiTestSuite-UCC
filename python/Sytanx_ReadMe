Overview:
The Syntax Checker uses a combination of XML-formatted rules and regular expressions to look for common errors in the CAPI scripts. 
The Syntax Checker will not catch every possible error, but should catch the most common ones.
The program has been tested to work on both Linux (Ubuntu 14.04) and Windows (7) using a Python 2.7 interpreter (the program won't work on Python 3 as of now).
 
Setup:
Setup is rather simple and platform independent. The four files, "UCCSyntaxChecker.py", "UCCSyntax.xml", "SyntaxLogFile.txt" and "Syntax_Readme" should be put in the following directory based on your OS:
Linux: UCC/scripts/python
Windows: UCC\scripts\python

Operation:
Navigate to the directory above, and from there call the python interpreter with "python UCCSyntaxChecker.py", then check the log file for results. If this doesn't work make sure Python 2.7 is installed first and that the path to the interpreter is specified.

Details:
The level of syntactic check depends on what type of command is being parsed. Below is a general breakdown of what rules are being used.

1. Commands in the form: XXXXX '!' XXXXX '!'
	a. The syntax checker will perform a "key, value" pair lookup to make sure that the value matches one of the rules
	b. For example, "SupportedChannelWidth!20!" would be considered valid, since 20, 40, and 80 are valid values for that command.
	On the other hand, "SupportedChannelWidth!19!" would result in an error as 19 is not a valid entry
	c. As another example, "wfa_control_agent_atheros11n_sta!ipaddr=192.168.250.92,port=9000!"; 
	here the syntax checker would check that the ip address is syntactically valid (dot-notation) and the port number is numerically valid (16-bit number)
	d. Checks include: Port numbers, MAC addresses, IPv4 and IPv6 addresses, File types, and other specific entries   

2. Commands in the form: define '!' XXXXX '!' XXXXX
	a. The syntax checker will perform a "key, value" pair lookup similar to the format above
	b. "define!$WFAEMTWirlessIP!192.165.100.21!" wouldn't result in an error since the ip address is valid 
	"define!$WFAEMTWirlessIP!192.165.1002.1!", for example, would give an error

3. CAPI Commands in the form: hostMachine '!' commandName (keyValPairs)* '!' returnVal; ('*' = 0 or more quantifier)
	a. The general expression needs to be matched, but individual "key, value" pairs will not be checked
	b. "$STA1_control_agent!sta_get_info,interface,$STA1_IF!DEFAULT" is valid
	c. "$STA1_control_agent!sta_get_info,$STA1_IF!DEFAULT" would result in an error

4. CAPI Commands in the form: hostMachine '!' (keyValPairs)+ '!' DEFAULT; ('+' = 1 or more quantifier)
	a. Like the example above, the check needs to match a regular expression, but not individual "key, value" pairs
	b. "TestbedAPConfigServer!AccessPoint,BroadcomAP,IPAddress,BroadcomAPIPAddress,UserName,BroadcomAPUserName,Password,BroadcomAPPassword,HostName,BroadcomAPHostName,PowerSwitchPort,BroadcomAPPowerSwitchPort!DEFAULT" is valid
	c. "TestbedAPConfigServer!AccessPoint,BroadcomAP,IPAddress,BroadcomAPIPAddress,UserName,BroadcomAPUserName,Password,BroadcomAPPassword,HostName,BroadcomAPHostName,PowerSwitchPort!DEFAULT" would result in an error as the last parameter was removed

5. All other commands are in the form: XXXXX '!' XXXXX '!' XXXXX; not not otherwise specified above
	a. The syntax checker will notice if the first argument is invalid, but does not check for the values of the second or third argument
	b. These commands aren't checked in depth because they are either very rarely edited, don't really effect the program's execution, or will accept any valid string so that error checking isn't possible
	c. "DisplayName!wfa_control_agent_dut!DUT!" is valid
	d. "DisplayName!wfa_control_agent_dut123!DUT123!" would also be considered valid
	e. However, "DisplayName123!wfa_control_agent_dut!DUT!" would result in an error       


